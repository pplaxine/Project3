package com.philippe75.mastermind;

import java.util.HashMap;

import org.apache.log4j.Logger;

import com.philippe75.extra.Dino;
import com.philippe75.extra.Fish;
import com.philippe75.extra.TextEnhencer;
import com.philippe75.game.Game;
import com.philippe75.generators.SecretColorCombinationGenerator;

/**
 * <b>ChallengerMastermind is a class that handle the Mastermind game in challenger mode.</b>
 * <p>Steps of the game : 
 * <ul>
 * <li>A random colour combination is generated.</li>
 * <li>User tries a combination.</li>
 * <li>for each answer an hint is return. This hint indicates, how many colours are well placed and how many are present but not well placed in the combination.</li>
 * <li>User tries combinations until he finds the answer or the number of tries permitted is reached.</li>
 * <li>If user finds the secret combination he wins, otherwise he looses.</li>
 * </ul>
 * </p>
 * 
 * <p>
 * The random colour combination is generated via a SecretColoCombinationGenerator. 
 * </p>
 * 
 * <p>
 * The secret combination length, the pool of colours, and the number of errors allowed can be set in a DataConfig.properties file.
 * </p>
 * 
 * @see SecretColorCombinationGenerator
 * @see Game#setProperties()
 * 
 * @author PPlaxine
 * @version 1.0
 */
public class ChallengerMastermind extends Mastermind{

	/**
	 * Creates a logger to generate log of the class.	
	 */
	private static final Logger log = Logger.getLogger(ChallengerMastermind.class);

	/**
	 * Constructor of ChallengerMastermind.
	 * 
	 * When the class is instantiated, load properties to be used by the game.
	 * 
	 * @see Game#setProperties()
	 * @see Game#howManyColors
	 * @see Game#combiLength
	 * @see Game#errorAllowed
	 * @see Game#dev
	 */
	public ChallengerMastermind() {
		if(setProperties())
			startTheGame();
	}
	
	/**
	 * Starts the game.  
	 * 
	 * A new secret combination is generated by instancing SecretColorCombinationGenerator.
	 * 
	 * A welcome screen is displayed.
	 * 
	 * The secret combination is displayed if the developer mode is activated.
	 * 
	 * Displays a request for user to make an entry. 
	 * 
	 * Initiate the game. 
	
	 * @see SecretColorCombinationGenerator
	 * @see ChallengerMastermind#printWelcome()
	 * @see ChallengerMastermind#displaySecretNum()
	 * @see Mastermind#printQuestion()
	 * @see ChallengerMastermind#initGame()
	 */
	@Override
	public void startTheGame() {
		log.info("Start of Mastermind game in challenger mode");
		sCG = new SecretColorCombinationGenerator(super.combiLength, super.howManyColors);
		printWelcome();
		displaySecretColorCombi();
		printQuestion();
		initGame();
		log.info("End of the game");
	}
	
	/**
	 * Display the welcome screen.
	 * 
	 * @see ChallengerMastermind#startTheGame()
	 */
	@Override
	public void printWelcome() {
		String 	str = TextEnhencer.ANSI_YELLOW;
				str += "\n\n******************************************\n";
				str += "*******         WELCOME TO         *******\n";
				str += "*******      MASTERMIND GAME       *******\n";
				str += "*******      CHALLENGER MODE       *******\n";	
				str += "******************************************";
				str += TextEnhencer.ANSI_RESET;
		System.out.println(str); 
	}

	/**
	 * Initiate the game. 
	 * 
	 * Increases the number of tries of the user.
	 * 
	 * Get the user answer. 
	 * 
	 * Compare the user answer. 
	 * 
	 * All those steps are repeated as long as the secret combination is not found or if the value of error allowed isn't reached by score value. 
	 * 
	 * If user finds the secret combination, he wins. A drawing and a message are displayed. Otherwise, user loose. a message is displayed.     
	 * 
	 * @see Mastermind#tries
	 * @see Mastermind#getUserAnswer()
	 * @see Mastermind#compareAnswer()
	 * @see Game#errorAllowed
	 */
	public void initGame() {
		// store the combination in tabColComni 
		this.tabColCombi = new HashMap<>(); 
		this.tabColCombi = sCG.getTabColorCombination(); 
		super.tries = 0; 
			
		do {		
			tries++;
			getUserAnswer();
			compareUserAnswer();
		} while (correctPositionUser != this.combiLength && tries < this.errorAllowed);
		// if the answer is found user wins	
		if(correctPositionUser == this.combiLength) {
			//Strategy Pattern 
			this.setEndOfGameDisplay(new Fish());
			this.displayEndGamePic();
			System.out.printf( TextEnhencer.ANSI_YELLOW + "\n\t  .+*°*+..+> | Congratulations ! | <+..+*°+.\nYou have found the correct secret color combination after %d " + ((tries < 2)? "trial." : "trials.") + "\n" + TextEnhencer.ANSI_RESET, tries);
		// if the answer isn't found user looses 
		}else {
			//Strategy Pattern 
			this.setEndOfGameDisplay(new Dino());
			this.displayEndGamePic();
			System.out.println(TextEnhencer.ANSI_RED + "\n\t\t\t .+*°*+..+> | GAME OVER !!! | <+..+*°+."+ TextEnhencer.ANSI_CYAN + "\n\t\t\t\tYou were almost there.\nThe solution is "+ sCG.toString() +". I am sure you will be more succeful next time!\n"  + TextEnhencer.ANSI_RESET);
		}
	}
}	

	
