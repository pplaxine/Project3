package com.philippe75.plus_minus;

import java.util.ArrayList;

import org.apache.log4j.Logger;

import com.philippe75.game.Fish;
import com.philippe75.game.TextEnhencer;
import com.philippe75.generators.SecretNumGenerator;

/**
 * <b>DuelPlusMinus is a class that handle the PlusMinus game in Duel IGame.</b>
 * <p>Steps of the game : 
 * <ul>
 * <li>user enters a secret combination for the computer to guess.</li>
 * <li>A random combination is generated by the computer for the user to guess.</li>
 * <li>User tries a combination.</li>
 * <li>for each answer an hint is return. This hint indicates for each digit of the user answer if the secret combination digit is higher or lower.</li>
 * <li>Computer tries a combination.</li>
 * <li>for each answer an hint is also return.</li>
 * <li>Each turn, user and Computer try a combination.</li>
 * <li>If user finds the secret combination he wins, if computer finds first, user looses.</li>
 * </ul>
 * </p>
 * 
 * <p>
 * The random combination is generate via a secret combination generator. 
 * </p>
 * 
 * <p>
 * The secret combination length can be set in a DataConfig.properties file.
 * </p>
 * 
 * @see SecretNumGenerator
 * @see DuelPlusMinus#setProperties()
 * 
 * @author PPlaxine
 * @version 1.0
 */
public class DuelPlusMinus extends PlusMinus{
	
	/**
	 * Creates a logger to generate log of the class.	
	 */
	private static final Logger log = Logger.getLogger(DuelPlusMinus.class);
	
	/**
	 * Constructor of DuelPlusMinus.
	 * 
	 * When the class is instantiated, load properties to be used by the game.
	 * 
	 * @see DuelPlusMinus#setProperties()
	 * @see DuelPlusMinus#errorAllowed
	 */
	public DuelPlusMinus() {
		if(this.setProperties())
			startTheGame();
	}
	
	/**
	 * Starts the game.  
	 * 
	 * A welcome screen is displayed.
	 * 
	 * The secret combination is displayed if the developer mode is activated.
	 * 
	 * Displays a request for user to make an entry. 
	 * 
	 * Initiate the game. 
	 * 
	 * @see DuelPlusMinus#printWelcome()
	 * @see DuelPlusMinus#requestUserSecretNum()
	 * @see DuelPlusMinus#initGame()
	 */
	@Override
	public void startTheGame() {
		log.info("Start of PlusMinus game in duel mode");
		this.sNG = new SecretNumGenerator(this.combiLength);
		printWelcome();	
		requestUserSecretNum();
		displaySecretNum();
		initGame();
		log.info("End of the game");
	}
	
	/**
	 * Display the welcome screen.
	 * 
	 * @see DuelPlusMinus#startTheGame()
	 */ 
	@Override
	public void printWelcome() {
		String 	str = TextEnhencer.ANSI_YELLOW; 
				str += "******************************************\n";
				str += "*******        WELCOME TO          *******\n";
				str += "*******        + or - GAME         *******\n";
				str += "*******         DUEL MODE          *******\n";	
				str += "******************************************\n";
				str += TextEnhencer.ANSI_RESET;
				System.out.println(str); 
	}
	
	/**
	 * Displays the secret combination if mode dev is activated
	 *  
	 * @see DuelPlusMinus#dev
	 * @see DuelPlusMinus#startTheGame()
	 */
	protected void displaySecretNum() {
		System.out.println(TextEnhencer.ANSI_CYAN + "\nComputer has generated a secret combination for you to guess ..." + TextEnhencer.ANSI_RESET);
		if(dev) {
			log.info("Game is running in developer mode");
			System.out.println(TextEnhencer.ANSI_CYAN + "*** Secret Num : " + this.sNG.getRandomNumber() + " *** " + TextEnhencer.ANSI_RESET);
		}
	}

	/**
	 * Initiate the game. 
	 * 
	 * User tries a combination.
	 * for each answer an hint is return. This hint indicates for each digit of the user answer if the secret combination digit is higher or lower.
	 * Computer tries a combination.
	 * for each answer an hint is also return.
	 * Each turn, user and Computer try a combination.
	 * If user finds the secret combination he wins, if computer finds first, user looses.
	 * 
	 * @see DuelPlusMinus#requestUserAnswer()
	 * @see DuelPlusMinus#generateAnswerWithHint()
	 * @see DuelPlusMinus#generateComputerAnswer()
	 * @see DuelPlusMinus#generateComputerHint()
	 */
	public void initGame() {
		this.tabUserAnswer = new ArrayList<Integer>();
		this.tries = 0;
		do {
			this.tries++;
			if(tries < 2) 	
				System.out.println(TextEnhencer.ANSI_YELLOW + "\nYour are the first to play!");
			else
				System.out.println(TextEnhencer.ANSI_YELLOW + "\nIt's your turn to play ...");	
			
			this.userAnswer = requestUserAnswer();		
			this.generateUserHint();	
			if(!this.sNG.getTabNumber().toString().equals(this.tabUserAnswer.toString())) {
				generateComputerAnswer();
				generateComputerHint();
			}
		} while (!this.sNG.getTabNumber().toString().equals(this.tabUserAnswer.toString()) && !tabComputerAnswer.toString().equals(tabUserCode.toString()));
		
		// Print Result once the game is over. 
		if (this.sNG.getTabNumber().toString().equals(this.tabUserAnswer.toString())){
			Fish.displayFish();
			System.out.printf(TextEnhencer.ANSI_YELLOW + "\n\t .+*°*+.+> | Congratulation !!! | <+.+*°*+.\n\t You found the computers secret code first !!!  \n" + TextEnhencer.ANSI_RESET);				
		}else {
			System.out.printf(TextEnhencer.ANSI_RED + "\n\t\t\t   .+*°*+.+> | GAME OVER !!!  | <+.+*°*+." + TextEnhencer.ANSI_CYAN + "\nComputer found the answer first !!! the secret number was %s. You'll have more chance next time! \n" + TextEnhencer.ANSI_RESET, this.sNG.getRandomNumber());
		}
	}
}